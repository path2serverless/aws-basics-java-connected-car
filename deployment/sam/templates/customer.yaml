AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation template for the Customer API and associated Lambdas.
Parameters:
  BucketName:
    Type: String
    Description: 'Specifies the name of the S3 bucket where code is deployed.'
  ServiceName:
    Type: String
    Description: 'Specifies the name of the service e.g. ConnectedCar.'
    Default: ConnectedCar
  EnvironmentName:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Test
      - Prod
    Description: 'Specifies the name of the environment (Dev,Test,Prod).'
  VersionNumber:
    Type: String
    Default: 1.0.0
    Description: 'Specifies the version number of the deployed jar files.'
  StageName:
    Type: String
    Default: api
    Description: 'Specifies the stage name e.g. api.'
  LambdaExecutionRole:
    Type: String
    Description: 'Specifies the ARN of the lambda execution role.'
  UserPool:
    Type: String
    Description: 'Specifies the ARN of the cognito user pool.'
Globals:
  Function:
    Runtime: java11
    CodeUri:
      Bucket: !Ref BucketName
      Key: !Sub '${ServiceName}/${EnvironmentName}/functions-${VersionNumber}.jar'
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:18'
    MemorySize: 1024
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        DealerTableName: !Sub '${ServiceName}_Dealer_Table_${EnvironmentName}'
        TimeslotTableName: !Sub '${ServiceName}_Timeslot_Table_${EnvironmentName}'
        AppointmentTableName: !Sub '${ServiceName}_Appointment_Table_${EnvironmentName}'
        RegistrationTableName: !Sub '${ServiceName}_Registration_Table_${EnvironmentName}'
        CustomerTableName: !Sub '${ServiceName}_Customer_Table_${EnvironmentName}'
        VehicleTableName: !Sub '${ServiceName}_Vehicle_Table_${EnvironmentName}'
        EventTableName: !Sub '${ServiceName}_Event_Table_${EnvironmentName}'
Conditions:
  IsDevelopment: !Equals [ !Ref EnvironmentName, Dev]
Resources:
  CustomerAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub '${ServiceName}_Customer_API_${EnvironmentName}'
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref UserPool
            AuthorizationScopes:
              - aws.cognito.signin.user.admin
              - openid
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: !If [ IsDevelopment, true, false ]
          MetricsEnabled: true
          HttpMethod: '*'
          ResourcePath: '/*'
      TracingEnabled: true
  UpdateCustomer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_UpdateCustomer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.UpdateCustomerFunction
      Description: Function to update a customer's profile
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/profile
            Method: PATCH
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetCustomer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetCustomer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetCustomerFunction
      Description: Function to retrieve the customer's profile
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/profile
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  CreateAppointment:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_CreateAppointment_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.CreateAppointmentFunction
      Description: Function to create a customer appointment
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/appointments
            Method: POST
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  DeleteAppointment:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_DeleteAppointment_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.DeleteAppointmentFunction
      Description: Function to delete a customer appointments
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: '/customer/appointments/{appointmentId}'
            Method: DELETE
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetAppointment:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetAppointment_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetAppointmentFunction
      Description: Function to retrieve an individual appointment
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: '/customer/appointments/{appointmentId}'
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetRegistrations:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetRegistrations_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetRegistrationsFunction
      Description: Function to retrieve the customer's vehicle registrations
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/registrations
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetAppointments:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetAppointments_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetAppointmentsFunction
      Description: Function to retrieve the customer's appointments for a registration
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/registrations/{vin}/appointments
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetVehicle:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetVehicle_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetVehicleFunction
      Description: Function to retrieve a customer's vehicle
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/vehicles/{vin}
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetEvents:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetEvents_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetEventsFunction
      Description: Function to retrieve the customer's vehicle events
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: '/customer/vehicles/{vin}/events'
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetDealers:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GeDealers_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetDealersFunction
      Description: Function to retrieve the dealers within a state
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/dealers
            RequestParameters:
              - method.request.querystring.stateCode
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
  GetTimeslots:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Customer_GetTimeslots_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.customer.GetTimeslotsFunction
      Description: Function to retrieve timeslots for a specified dealer and service date
      Role: !Ref LambdaExecutionRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customer/dealers/{dealerId}/timeslots
            Method: GET
            RestApiId: !Ref CustomerAPI
      AutoPublishAlias: !Ref StageName
Outputs:
  CustomerAPI:
    Description: 'The Customer API ID'
    Value: !Ref CustomerAPI
