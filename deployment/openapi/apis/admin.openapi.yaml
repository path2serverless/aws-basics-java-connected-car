openapi: "3.0.1"
info:
  title: "ConnectedCar_Admin_API"
  version: "1.0"
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true 
x-amazon-apigateway-request-validator: all
paths:
  /admin/dealers:
    post: # create dealer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dealer' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDealer.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
    get: # get dealers
      parameters:
      - name: "stateCode"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of dealers by stateCode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealers'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDealers.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/dealers/{dealerId}:
    get: # get dealer
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual dealer by dealerId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealer'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDealer.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/dealers/{dealerId}/timeslots:
    post: # create timeslot
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeslot' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTimeslot.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
    get: # get timeslots
      parameters:
      - name: "startDate"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "endDate"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of timeslots for a dealer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslots'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimeslots.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/dealers/{dealerId}/timeslots/{serviceDateHour}:
    get: # get timeslot
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "serviceDateHour"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimeslot.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/customers:
    post: # create customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerProvision' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCustomer.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
    get: # get customers
      parameters:
      - name: "lastname"
        in: "query"
        schema:
          type: "string"
      responses:
        '200':
          description: A list of customers by lastname
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomers.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/customers/{username}:
    get: # get customer
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual customer by username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomer.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/customers/{username}/registrations:
    post: # create registration
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRegistration.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
    patch: # update registration
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationPatch' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRegistration.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
    get: # get registrations
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of vehicle registrations for a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registrations'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomerRegistrations.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/customers/{username}/registrations/{vin}:
    get: # get registration
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRegistration.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/vehicles:
    post: # create vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateVehicle.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/vehicles/{vin}:
    get: # get vehicle
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual vehicle by vin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVehicle.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
  /admin/vehicles/{vin}/registrations:
    get: # get vehicle registrations
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of registrations for a vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registrations'
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVehicleRegistrations.Arn}:${StageName}/invocations
        passthroughBehavior: "when_no_match"
        credentials: 
          Fn::Sub: ${LambdaInvocationRole}
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
