AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: 'CloudFormation template for the Admin API and associated Lambdas.'
Parameters:
  BucketName:
    Type: String
    Description: 'Specifies the name of the S3 bucket where code is deployed.'
  ServiceName:
    Type: String
    Description: 'Specifies the name of the service e.g. ConnectedCar.'
    Default: ConnectedCar
  EnvironmentName:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Test
      - Prod
    Description: 'Specifies the name of the environment (Dev,Test,Prod).'
  VersionNumber:
    Type: String
    Default: 1.0.0
    Description: 'Specifies the version number of the deployed jar files.'
  StageName:
    Type: String
    Default: api
    Description: 'Specifies the stage name e.g. api.'
  LambdaExecutionRole:
    Type: String
    Description: 'Specifies the ARN of the lambda execution role.'
  LambdaInvocationRole:
    Type: String
    Description: 'Specifies the ARN of the lambda invocation role.'
  UserPoolId:
    Type: String
    Description: 'Specifies the Cognito ID for the user pool'
Globals:
  Function:
    Runtime: java11
    CodeUri:
      Bucket: !Ref BucketName
      Key: !Sub '${ServiceName}/${EnvironmentName}/functions-${VersionNumber}.jar'
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:18'
    MemorySize: 4096
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        DealerTableName: !Sub '${ServiceName}_Dealer_${EnvironmentName}'
        TimeslotTableName: !Sub '${ServiceName}_Timeslot_${EnvironmentName}'
        AppointmentTableName: !Sub '${ServiceName}_Appointment_${EnvironmentName}'
        RegistrationTableName: !Sub '${ServiceName}_Registration_${EnvironmentName}'
        CustomerTableName: !Sub '${ServiceName}_Customer_${EnvironmentName}'
        VehicleTableName: !Sub '${ServiceName}_Vehicle_${EnvironmentName}'
        EventTableName: !Sub '${ServiceName}_Event_${EnvironmentName}'
        UserPoolId: !Ref UserPoolId
Conditions:
  IsDevelopment: !Equals [ !Ref EnvironmentName, Dev]
Resources:
  AdminAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub '${ServiceName}_Admin_API_${EnvironmentName}'
      StageName: !Ref StageName
      Auth: 
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: !Sub '${ServiceName}_Admin_API_UsagePlan_${EnvironmentName}'
        ApiKeyRequired: true      
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${BucketName}/${ServiceName}/${EnvironmentName}/admin.openapi.yaml'
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: !If [ IsDevelopment, true, false ]
          MetricsEnabled: true
          HttpMethod: '*'
          ResourcePath: '/*'
      TracingEnabled: true
  CreateDealer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_CreateDealer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.CreateDealerFunction
      Description: Function to create a dealer
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetDealers:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetDealers_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetDealersFunction
      Description: Function to search for dealers
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetDealer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetDealer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetDealerFunction
      Description: Function to retrieve a dealer
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  CreateTimeslot:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_CreateTimeslot_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.CreateTimeslotFunction
      Description: Function to create a timeslot
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetTimeslots:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetTimeslots_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetTimeslotsFunction
      Description: Function to retrieve a list of timeslots for a dealer and service date
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetTimeslot:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetTimeslot_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetTimeslotFunction
      Description: Function to retrieve an individual timeslot
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  CreateCustomer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_CreateCustomer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.CreateCustomerFunction
      Description: Function to create a customer
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetCustomers:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetCustomers_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetCustomersFunction
      Description: Function to search for customers by lastname
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetCustomer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetCustomer_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetCustomerFunction
      Description: Function to retrieve a customer
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  CreateRegistration:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_CreateRegistration_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.CreateRegistrationFunction
      Description: Function to create a vehicle registration
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  UpdateRegistration:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_UpdateRegistration_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.UpdateRegistrationFunction
      Description: Function to update a vehicle registration
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetCustomerRegistrations:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetCustomerRegistrations_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetCustomerRegistrationsFunction
      Description: Function to retrieve a list of vehicle registrations for a customer
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetRegistration:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetRegistration_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetRegistrationFunction
      Description: Function to retrieve an individual registration
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  CreateVehicle:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_CreateVehicle_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.CreateVehicleFunction
      Description: Function to create a vehicle
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetVehicle:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetVehicle_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetVehicleFunction
      Description: Function to retrieve a vehicle
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
  GetVehicleRegistrations:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Admin_GetVehicleRegistrations_${EnvironmentName}'
      Handler: com.path2serverless.connectedcar.functions.admin.GetVehicleRegistrationsFunction
      Description: Function to retrieve a list of vehicle registrations for a vehicle
      Role: !Ref LambdaExecutionRole
      AutoPublishAlias: !Ref StageName
Outputs:
  AdminAPI:
    Description: 'The Admin API ID'
    Value: !Ref AdminAPI
