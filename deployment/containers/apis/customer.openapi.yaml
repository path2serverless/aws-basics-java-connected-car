openapi: "3.0.1"
info:
  title: "ConnectedCar_Customer_API"
  version: "1.0"
paths:
  /customer/profile:
    patch: # update customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPatch' 
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "PATCH"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/profile
        passthroughBehavior: "when_no_match"
    get: # get customer
      responses:
        '200':
          description: An individual customer by auth username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/profile
        passthroughBehavior: "when_no_match"
  /customer/appointments:
    post: # create appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment' 
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "POST"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/appointments
        passthroughBehavior: "when_no_match"
  /customer/appointments/{appointmentId}:
    delete: # delete appointment
      parameters:
      - name: "appointmentId"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "DELETE"
        requestParameters:
          integration.request.path.appointmentId: "method.request.path.appointmentId"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/appointments/{appointmentId}
        passthroughBehavior: "when_no_match"
    get: # get appointment
      parameters:
      - name: "appointmentId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual appointment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        requestParameters:
          integration.request.path.appointmentId: "method.request.path.appointmentId"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/appointments/{appointmentId}
        passthroughBehavior: "when_no_match"
  /customer/registrations:
    get: # get registrations
      responses:
        '200':
          description: A list of registrations for a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registrations'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/registrations
        passthroughBehavior: "when_no_match"
  /customer/registrations/{vin}/appointments:
    get: # get appointments
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of appointments by vehicle vin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointments'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        requestParameters:
          integration.request.path.vin: "method.request.path.vin"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/registrations/{vin}/appointments
        passthroughBehavior: "when_no_match"
  /customer/vehicles/{vin}:
    get: # get vehicle
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: An individual vehicle by vin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        requestParameters:
          integration.request.path.vin: "method.request.path.vin"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/vehicles/{vin}
        passthroughBehavior: "when_no_match"
  /customer/vehicles/{vin}/events:
    get: # get events
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of events for a vehicle vin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        requestParameters:
          integration.request.path.vin: "method.request.path.vin"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/vehicles/{vin}/events
        passthroughBehavior: "when_no_match"
  /customer/dealers:
    get: # get dealers
      parameters:
      - name: "stateCode"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of dealers by stateCode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealers'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/dealers
        passthroughBehavior: "when_no_match"
  /customer/dealers/{dealerId}/timeslots:
    get: # get timeslots
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: A list of timeslots for a dealer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslots'
      security:
      - CognitoAuthorizer:
        - aws.cognito.signin.user.admin
        - openid
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionType: "VPC_LINK"
        connectionId: 
          Fn::Sub: ${VPCLink}
        httpMethod: "GET"
        requestParameters:
          integration.request.path.dealerId: "method.request.path.dealerId"
        uri: 
          Fn::Sub: http://${NetworkLoadBalancerDns}/customer/dealers/{dealerId}/timeslots
        passthroughBehavior: "when_no_match"
components:
  securitySchemes:
    CognitoAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      scopes:
      - aws.cognito.signin.user.admin
      - openid
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: "cognito_user_pools"
        providerARNs:
        - Fn::Sub: ${UserPool}
